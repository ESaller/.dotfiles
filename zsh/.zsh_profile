################################################################################
# Setting Up Directories
# If some directories are needed they are specified here
# Note: Some plugins may create their own folders
################################################################################

export CACHE_DIR="$HOME/.cache"
[[ ! -d "$CACHE_DIR" ]] && mkdir -p "$CACHE_DIR"
export _FASD_DATA="$CACHE_DIR/.fasd" # set fasd data file location
export ZPLUG_HOME="$HOME/.zplug"


################################################################################
# TERM
################################################################################

if [[ -n "$TMUX" ]]; then
    export TERM=screen-256color
else
    if [[ $TERMINFO == *"kitty"* ]]; then
      export TERM=xterm-kitty
      alias ssh='TERM=xterm-256color ssh' # fix on ssh
    fi
    export TERM=xterm-256color
fi


################################################################################
# LANG
################################################################################

export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"


################################################################################
# conda setup
################################################################################

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('$HOME/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$HOME/miniconda3/etc/profile.d/conda.sh" ]; then
        . "$HOME/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="$HOME/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<


################################################################################
# PATH MODIFICATIONS
################################################################################

# nix before anything else
export PATH="$HOME/.nix-profile/bin/:$PATH" 

# e.g. poetry is located there
export PATH="$HOME/.local/bin:$PATH"

# personal scipts are located there
export PATH="$HOME/.local/scripts:$PATH"

# personal bin dir
export PATH="$HOME/.dotfiles/bin:$PATH"

################################################################################
# EDITOR
################################################################################

export EDITOR=nvim
export VISUAL=nvim


################################################################################
# HISTORY
# Setting up the shell history
################################################################################

# Filter out lines containing the word "proxy" from the Zsh history
export HISTFILE="$CACHE_DIR/.zsh_history"
tmpfile=$(mktemp)
grep -v 'proxy' "$HISTFILE" > "$tmpfile"

export HISTSIZE=10000000
export SAVEHIST=10000000

# From https://github.com/mattjj/my-oh-my-zsh/blob/master/history.zsh

setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
unsetopt HIST_BEEP               # Beep when accessing nonexistent history.



################################################################################
# CUSTOM zsh settings
################################################################################

# cd replacement with history
eval "$(zoxide init zsh)"


# Load Angular CLI autocompletion.
# source <(ng completion script)

# check of tmux
is_tmux_running() {
  tmux ls >/dev/null 2>&1
}

# tmux use session switcher
tmux_option_or_fallback() {
	local option_value
	option_value="$(tmux show-option -gqv "$1")"
	if [ -z "$option_value" ]; then
		option_value="$2"
	fi
	echo "$option_value"
}

tmux bind-key "$(tmux_option_or_fallback "@t-bind" "T")" run-shell "$HOME/.dotfiles/bin/t"


################################################################################
# CUSTOM COMMANDS
# Combinations of different installed plugins, e.g. fzf+fasd
################################################################################

# tmux fzf integration
# tm - create new tmux session, or switch to existing one. Works from within tmux too.
# `tm` will allow you to select your tmux session via fzf.
tm() {
  # Check if tmux is running first
  if ! is_tmux_running; then
    echo "Tmux is not running."
    return 1
  fi

  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}


function zd() {
  if [ $# -eq 0 ]; then
      # No arguments provided, use interactive selection with zoxide and find
      local dir="$( { zoxide query -l; find . -type d -maxdepth 4 -print 2>/dev/null; } | \
                     fzf --height 50% --layout=reverse --info=inline \
                         --preview 'ls -la {}' --preview-window=down:50%:+{2} )"
  else
      # Argument provided, use zoxide to directly jump to the best match
      local dir="$(zoxide query -- "$1")"
  fi

  # Change to the selected directory if it's valid
  if [ -n "$dir" ] && [ -d "$dir" ]; then
      cd "$dir" || return 1
  else
      echo "Error: Directory '$dir' not found."
      return 1
  fi
}

# fasd fzf integration
# j: jump to directories
alias j=zd


# fasd fzf integration
# View recent f files
#function v() {
#    local file
#    file="$(fasd -Rfl "$1" | fzf -1 -0 --no-sort +m)" && $EDITOR "${file}" || return 1
#}

# fasd fzf integration
# cd into the directory containing a recently used file
#function vd() {
#    local dir
#    local file
#    file="$(fasd -Rfl "$1" | fzf -1 -0 --no-sort +m)" && dir=$(dirname "$file") && cd "$dir"
#}


# env from dir with uppercase env var and git proxy option
efd() {
    local dir_path="$1"
    
    if [[ ! -d "$dir_path" ]]; then
        echo "Error: $dir_path is not a directory"
        return 1
    fi

    local file
    local env_var
    local env_var_upper
    local content
    local confirmed_overwrites=()
    local new_vars=0
    local overwrites=0
    local set_vars=()
    local set_git_proxy=0

    for file in "$dir_path"/*; do
        if [[ -f "$file" ]]; then
            env_var=$(basename "$file")
            typeset -u env_var_upper="$env_var" # convert to uppercase
            content=$(<"$file")

            if [[ -z "$env_var" ]]; then
                echo "Warning: Skipping empty filename in $file"
                continue
            fi

            for var_to_set in "$env_var" "$env_var_upper"; do
                if [[ -n "${(P)var_to_set}" ]]; then
                    echo "Environment variable $var_to_set already exists."
                    read -q "reply?Do you want to overwrite $var_to_set? (y/n) "
                    echo
                    if [[ "$reply" =~ ^[Yy]$ ]]; then
                        export "$var_to_set"="$content"
                        confirmed_overwrites+=("$var_to_set")
                        set_vars+=("$var_to_set")
                        ((overwrites++))
                    else
                        echo "Skipping $var_to_set"
                    fi
                else
                    export "$var_to_set"="$content"
                    set_vars+=("$var_to_set")
                    ((new_vars++))
                fi
            done

            if [[ "$env_var_upper" == "HTTP_PROXY" || "$env_var_upper" == "HTTPS_PROXY" ]]; then
                read -q "reply?Do you want to set $env_var_upper for git as well? (y/n) "
                echo
                if [[ "$reply" =~ ^[Yy]$ ]]; then
                    __enable_proxy_git() {
                        if [ "$env_var_upper" = "HTTP_PROXY" ]; then
                            git config --global http.proxy "$content"
                            git config --global https.proxy "$content"
                        else
                            git config --global http.proxy "$content"
                            git config --global https.proxy "$content"
                        fi
                    }
                    __enable_proxy_git
                    set_git_proxy=1
                fi
            fi
        fi
    done

    echo "Summary:"
    echo "New environment variables set: $new_vars"
    if (( overwrites > 0 )); then
        echo "Overwritten environment variables: $overwrites"
    fi
    if (( set_git_proxy > 0 )); then
        echo "Git proxy configuration set."
    fi
    echo "All set variables: ${set_vars[@]}"

    return 0
}

# unset env from dir with uppercase env var and git proxy option
uefd() {
    local dir_path="$1"
    
    if [[ ! -d "$dir_path" ]]; then
        echo "Error: $dir_path is not a directory"
        return 1
    fi

    local env_vars_to_unset=()
    local file
    local env_var
    local env_var_upper
    local unset_git_proxy=0

    for file in "$dir_path"/*; do
        if [[ -f "$file" ]]; then
            env_var=$(basename "$file")
            typeset -u env_var_upper="$env_var" # convert to uppercase
            for var_to_unset in "$env_var" "$env_var_upper"; do
                if [[ -n "${(P)var_to_unset}" ]]; then
                    env_vars_to_unset+=("$var_to_unset")
                fi
            done

            if [[ "$env_var_upper" == "HTTP_PROXY" || "$env_var_upper" == "HTTPS_PROXY" ]]; then
                read -q "reply?Do you want to unset the git proxy configuration for $env_var_upper? (y/n) "
                echo
                if [[ "$reply" =~ ^[Yy]$ ]]; then
                    __disable_proxy_git() {
                        git config --global --unset http.proxy
                        git config --global --unset https.proxy
                    }
                    __disable_proxy_git
                    unset_git_proxy=1
                fi
            fi
        fi
    done

    if (( ${#env_vars_to_unset[@]} == 0 )); then
        echo "No environment variables to unset."
        return 0
    fi

    echo "The following environment variables will be unset: ${env_vars_to_unset[@]}"
    read -q "reply?Are you sure you want to unset these environment variables? (y/n) "
    echo

    if [[ "$reply" =~ ^[Yy]$ ]]; then
        for env_var in "${env_vars_to_unset[@]}"; do
            unset "$env_var"
            echo "Unset $env_var"
        done
        if (( unset_git_proxy > 0 )); then
            echo "Git proxy configuration unset."
        fi
        echo "All specified environment variables have been unset."
    else
        echo "Operation cancelled."
    fi

    return 0
}


#
#Two helper functions that ease the use of nix profiles on mac
#

link_nix_apps() {
  mkdir -p /Applications/Nix\ Apps
  for app in ~/.nix-profile/Applications/*.app; do
    ln -sfn "$app" "/Applications/Nix Apps/$(basename "$app")"
  done
  echo "All Nix applications have been linked to /Applications/Nix Apps."
}

unlink_nix_apps() {
  for app in /Applications/Nix\ Apps/*.app; do
    if [[ -L "$app" ]]; then
      rm "$app"
    fi
  done
  echo "All symbolic links to Nix applications have been removed from /Applications/Nix Apps."
}

#
# Two helper functions that set the proxy for nix based on env variables
#
# In /Library/LaunchDaemons/org.nixos.nix-daemon.plist
# the keys have to be added first manually
#     <key>EnvironmentVariables</key>
#    <dict>
#      ...
#      <key>http_proxy</key>
#      <string>PROXY_HOLDER</string>
#      <key>https_proxy</key>
#      <string>PROXY_HOLDER</string>
#    </dict>

set_nix_proxy() {
    # Ensure the http_proxy and https_proxy are set in the environment
    if [[ -z "$http_proxy" || -z "$https_proxy" ]]; then
        echo "Environment variables http_proxy and https_proxy need to be set."
        return 1
    fi

    # Set the proxy values in the plist file
    sudo /usr/libexec/PlistBuddy -c "Set :EnvironmentVariables:http_proxy $http_proxy" /Library/LaunchDaemons/org.nixos.nix-daemon.plist
    sudo /usr/libexec/PlistBuddy -c "Set :EnvironmentVariables:https_proxy $https_proxy" /Library/LaunchDaemons/org.nixos.nix-daemon.plist

    # Reload the nix-daemon plist to apply changes
    sudo launchctl unload /Library/LaunchDaemons/org.nixos.nix-daemon.plist
    sudo launchctl load /Library/LaunchDaemons/org.nixos.nix-daemon.plist
}

unset_nix_proxy() {
    # Remove the proxy values from the plist file and ignore errors if they don't exist
    sudo /usr/libexec/PlistBuddy -c "Delete :EnvironmentVariables:http_proxy" /Library/LaunchDaemons/org.nixos.nix-daemon.plist 2>/dev/null || true
    sudo /usr/libexec/PlistBuddy -c "Delete :EnvironmentVariables:https_proxy" /Library/LaunchDaemons/org.nixos.nix-daemon.plist 2>/dev/null || true

    # Reload the nix-daemon plist to apply changes
    sudo launchctl unload /Library/LaunchDaemons/org.nixos.nix-daemon.plist
    sudo launchctl load /Library/LaunchDaemons/org.nixos.nix-daemon.plist
}

